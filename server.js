express = require('express');
const app = express();
const port = 3001;
const mariadb = require('mariadb');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition: {
        info: {
            title: 'Personal Budget API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated by',
        },
        host: 'localhost:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
};
const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

const pool = mariadb.createPool({
    host: '64.225.14.50',
    user: 'root',
    password: 'root',
    database: 'sample',
    port: 3306,
    connectionLimit: 50,
});

/**
 * @swagger
 * /foods:
 *    get:
 *      description: Return all foods
 *      produces:
 *          - application/json
 *      response:
 *          201:
 *              description: Object food containing array of food objects
 */
app.get('/foods', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const rows = await connection.query("SELECT * FROM foods");
        connection.end();
        res.setHeader('Content-Type', 'application/json');
        res.json(rows);
    } catch (err) {
        console.error("MariaDB Error:", err.message); // Log the MariaDB error message
        console.error("MariaDB Error Code:", err.code); // Log the MariaDB error code
        res.status(500).json({ error: 'Internal server error' });
    }
});

/**
 * @swagger
 * /agents:
 *    get:
 *      description: Return all agents
 *      produces:
 *          - application/json
 *      response:
 *          201:
 *              description: Object agents containing array of agent objects
 */
app.get('/agents', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const rows = await connection.query("SELECT * FROM agents");
        connection.end();
        res.setHeader('Content-Type', 'application/json');
        res.json(rows);
    } catch (err) {
        console.error("MariaDB Error:", err.message); // Log the MariaDB error message
        console.error("MariaDB Error Code:", err.code); // Log the MariaDB error code
        res.status(500).json({ error: 'Internal server error' });
    }
});

/**
 * @swagger
 * /company:
 *    get:
 *      description: Return all company objects
 *      produces:
 *          - application/json
 *      response:
 *          201:
 *              description: Object company containing array of company objects
 */
app.get('/company', async (req, res) => {
    try {
        const connection = await pool.getConnection();
        const rows = await connection.query("SELECT * FROM company");
        connection.end();
        res.setHeader('Content-Type', 'application/json');
        res.json(rows);
    } catch (err) {
        console.error("MariaDB Error:", err.message); // Log the MariaDB error message
        console.error("MariaDB Error Code:", err.code); // Log the MariaDB error code
        res.status(500).json({ error: 'Internal server error' });
    }
});

/**
 * @swagger
 * /foods:
 *   post:
 *     summary: Create a new food item.
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: food
 *         description: Food object to create.
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Food'
 *     responses:
 *       201:
 *         description: Food item created successfully.
 *       500:
 *         description: Internal server error.
 */
app.post('/foods', async (req, res) => {
    try {
        const { name, description, price } = req.body;

        // Validate that required fields are not empty or null
        if (!name || !description || !price) {
            return res.status(400).json({ error: 'Name, description, and price are required fields' });
        }

        const connection = await pool.getConnection();
        const result = await connection.query("INSERT INTO foods (name, description, price) VALUES (?, ?, ?)", [name, description, price]);
        connection.end();
        res.json({ message: 'Food item created successfully', id: result.insertId });
    } catch (err) {
        console.error("MariaDB Error:", err.message);
        console.error("MariaDB Error Code:", err.code);
        res.status(500).json({ error: 'Internal server error' });
    }
});

/**
 * @swagger
 * /foods/{id}:
 *   patch:
 *     summary: Update a specific food item by ID.
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: Food item ID.
 *         in: path
 *         required: true
 *         type: integer
 *       - name: food
 *         description: Food object with fields to update.
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Food'
 *     responses:
 *       200:
 *         description: Food item updated successfully.
 *       404:
 *         description: Food item not found.
 *       500:
 *         description: Internal server error.
 */
app.patch('/foods/:id', async (req, res) => {
    try {
        const { id } = req.params; // Extract the food item ID from the URL parameter
        const { ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body; // Extract data to patch from the request body
        const connection = await pool.getConnection();

        // Check if the food item with the specified ID exists
        const existingFood = await connection.query("SELECT * FROM foods WHERE ITEM_ID=?", [id]);
        if (existingFood.length === 0) {
            connection.end();
            return res.status(404).json({ error: 'Food item not found' });
        }

        // Update the food item based on the provided data
        await connection.query("UPDATE foods SET ITEM_NAME=?, ITEM_UNIT=?, COMPANY_ID=? WHERE ITEM_ID=?", [ITEM_NAME, ITEM_UNIT, COMPANY_ID, id]);

        connection.end();
        res.json({ message: 'Food item updated successfully' });
    } catch (err) {
        console.error("MariaDB Error:", err.message);
        console.error("MariaDB Error Code:", err.code);
        res.status(500).json({ error: 'Internal server error' });
    }
});

/**
 * @swagger
 * /foods/{id}:
 *   put:
 *     summary: Replace a specific food item by ID.
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: Food item ID.
 *         in: path
 *         required: true
 *         type: integer
 *       - name: food
 *         description: Food object to replace the existing one.
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Food'
 *     responses:
 *       200:
 *         description: Food item replaced successfully.
 *       404:
 *         description: Food item not found.
 *       500:
 *         description: Internal server error.
 */
app.put('/foods/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { ITEM_NAME, ITEM_UNIT, COMPANY_ID } = req.body;
        // Validate that all fields are provided
        if (!ITEM_NAME || !ITEM_UNIT || !COMPANY_ID) {
            return res.status(400).json({ error: 'ITEM_NAME, ITEM_UNIT, and COMPANY_ID are required fields for replacement' });
        }
        const connection = await pool.getConnection();
        const existingFood = await connection.query("SELECT * FROM foods WHERE ITEM_ID=?", [id]);
        if (existingFood.length === 0) {
            connection.end();
            return res.status(404).json({ error: 'Food item not found' });
        }
        await connection.query("UPDATE foods SET ITEM_NAME=?, ITEM_UNIT=?, COMPANY_ID=? WHERE ITEM_ID=?", [ITEM_NAME, ITEM_UNIT, COMPANY_ID, id]);

        connection.end();
        res.json({ message: 'Food item replaced successfully' });
    } catch (err) {
        console.error("MariaDB Error:", err.message);
        console.error("MariaDB Error Code:", err.code);
        res.status(500).json({ error: 'Internal server error' });
    }
});


/**
 * @swagger
 * /foods/{id}:
 *   delete:
 *     summary: Delete a specific food item by ID.
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: Food item ID.
 *         in: path
 *         required: true
 *         type: integer
 *     responses:
 *       200:
 *         description: Food item deleted successfully.
 *       404:
 *         description: Food item not found.
 *       500:
 *         description: Internal server error.
 */
app.delete('/foods/:id', async (req, res) => {
    try {
        const { id } = req.params; // Extract the food item ID from the URL parameter
        const connection = await pool.getConnection();

        // Check if the food item with the specified ID exists
        const existingFood = await connection.query("SELECT * FROM foods WHERE ITEM_ID=?", [id]);
        if (existingFood.length === 0) {
            connection.end();
            return res.status(404).json({ error: 'Food item not found' });
        }

        // Delete the food item with the specified ID
        await connection.query("DELETE FROM foods WHERE ITEM_ID=?", [id]);

        connection.end();
        res.json({ message: 'Food item deleted successfully' });

    } catch (err) {
        console.error("MariaDB Error:", err.message);
        console.error("MariaDB Error Code:", err.code);
        res.status(500).json({ error: 'Internal server error' });
    }
});

app.listen(port, function () {
        console.log(`Listening on http://64.225.14.50:${port}`);
});
